== Specification for the language, KAb used in AbOS ==

KAb is meant to be a scripting language designed
specifically for AbOS which provides the user with
limited instructions. It is used as a substitute for
Assembly when writing code inside of AbOS
(FIXME: clarification)


== INTERFACING WITH REGISTERS ==
Interfacing with several registers is required
since some syscalls (i.e. 0x01) require 1+ arguments,
which are in register form.

Registers are the exact same as they are in assembly,
AH here is AH in assembly, AL as well, and so on
and so forth

=== SETTING / GETTING VALUES ===
To get a register's value you use the '->' notation:
->[REG]

To set a register's value you use the `>>` notation:
[REG]>>[VAL]

=== PASSING IN REGISTERS TO SUB-SELECTORS ===
To pass in an argument to a sub-selector, you seperate
each argument by a ',' if the amount of arguments > 1.

So, 'syscall->0x01->ah,' would be invalid



== INTERFACING WITH THE CPU ==

=== SYSCALLS ===
Syscalls are used to perform RING-0 activities, such
as interrupts.

You can invoke a syscall using the following syntax:

syscall->[SYS INT]->[ARGS]

==== INTERRUPT TABLE ====

Syscall hex code  | x86  | Args?
-------------------------------
0x06			  | 0x16 | No
0x09			  | 0x19 | No
0xF0			  | N/A  | Yes

===== THE CASE FOR SYSCALL 0xF0 =====
Looking at the table, you will see '0xF0' listed as a
syscall. This is for exiting, just like RAX=0x60 on Linux.

This syscall takes one parameter, SI -- the exit code. If
SI > 0, then the program will exit with an error code.

== SYNTAX ==

Generally, syntax follows this format:
[MAIN SELECTOR]->[SUB-SELECTOR]->[ARGS, IF ANY]

For example, if you want to cause an interrupt (specifically
0x06 in this case), you'd run
syscall->0x09->None

If no args are present for SUB-SELECTOR, 'None' must be
passed in.

== COMMENTS ==
In KAb, comments are defined with the pipe symbol, '|'.


== EXAMPLE CODE ==

=== "Hello World" ===
DISCLAIMER: this is just a 'Hi', not a full 'Hello World'.

	ah>>0x0E
	al>>0x48
	syscall->0x01->ah,al
	al>>0x69
	syscall->0x01->ah,al

	si>>0x00
	syscall->0xF0->si
